# AES-128-ECB, AES-192-ECB and AES-256-ECB implementation
from matrix_multiplications import mixColumnsMultiplication
import numpy as np

def rotWord(word, startfrom):
    """
    Takes a list and an index and rotates the list to start from that index
    """
    result = word[startfrom:]
    result.extend(word[0:startfrom])
    return result

def subWord(word, inv = False):
    """
    Takes a list of bytes and returns a new list with subsituted bytes based on the S-box or the inverse S-box
    """
    for i in range(0, len(word)):
        w = ('0' + hex(word[i])[2:])[-2:]
        if inv: word[i] = getInvSBox(int(w[0], 16), int(w[1], 16))
        else: word[i] = getSBox(int(w[0], 16), int(w[1], 16))
    return word

def rcon(num):
    table = {1: 0x01, 2: 0x02, 3: 0x04, 4: 0x08, 5: 0x10, 6: 0x20, 7: 0x40,
                8: 0x80, 9: 0x1B, 10: 0x36, 11: 0x6C, 12: 0xD8, 13: 0xAB, 14: 0x4D}
    return [table[num], 0x00, 0x00, 0x00]

def generateKeys(key):
    """
    Generates the keys for all rounds of the encryption and decryption processes
    """
    if len(key) != 32 and len(key) != 48 and len(key) != 64:
        raise ValueError("The key length should be 128, 192 or 256 bits")
    else:
        # It uses the key length to determine the number of keys to generate based on the number of rounds.
        keys_num = {32: 11, 48: 13, 64: 15}.get(len(key))
    
    # Each key is divided into 4 bytes words
    k = [key[i:i+8] for i in range(0, len(key), 8)] # The initial key given to the encrypt function
    keys = []

    for round_num in range(1, keys_num):
        round_key = []
        last = subWord(rotWord(wordSplit(k[-1]), 1)) # Apply subWord, rotWord to the last word of the key.
        for i in range(len(k)): # No. of words in the key
            if i == 0: # If current word is the first word in the key
                last = xorList(last, rcon(round_num)) # XOR rcon(round number) to the last word of the key
            if (((round_num * 8) + i) - 4) % 8 == 0  and len(k) > 6: # Only in case of AES-256
                last = subWord(last)

            # XOR the current word of the key to the last word of the key and replace last with it for the next iteration
            last = xorList(last, wordSplit(k[i]))
            joined_key = ""
            for i in last:
                joined_key += ('0' + hex(i)[2:])[-2:]
            round_key.append(joined_key)
        keys.append(''.join(round_key)[:32])
        k = round_key
    return keys

def wordSplit(word):
    """
    Splits a word into smaller 1 byte words
    """
    return [int(word[i:i+2], 16) for i in range(0, len(word), 2)]

sbox = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe , 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]
def getSBox(x, y):
    """
    Encryption S-Box
    """
    global sbox
    return sbox[x][y]

invsbox = [
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
    [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
    [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
    [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
    [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
    [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
    [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
    [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
    [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
    [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
    [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
    [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
    [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
    [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
]
def getInvSBox(x, y):
    """
    Decryption S-Box
    """
    global invsbox
    return invsbox[x][y]

def xor(a, b):
    return a ^ b

def xorList(a: list, b: list):
    result = []
    for i in range(len(a)):
        result.append(xor(a[i], b[i]))
    return result

def messageXOR(message, key):
    block = hex(xor(message, key))[2:]
    return block.zfill(32)

def generateByteMatrix(hex_data):
    matrix = []
    x = []
    for i in range(0, len(hex_data), 2):
        hex_string = hex_data[i: i+2]
        x.append(hex_string)
        if len(x) == 4:
            matrix.append(x)
            x = []
    return matrix

def subBytes(bytes_matrix, inv = False):
    for column in range(len(bytes_matrix)):
        for row in range(len(bytes_matrix[column])):
            if inv:
                bytes_matrix[column][row] = getInvSBox(int(bytes_matrix[column][row][0], 16), int(bytes_matrix[column][row][1], 16))
            else: 
                bytes_matrix[column][row] = getSBox(int(bytes_matrix[column][row][0], 16), int(bytes_matrix[column][row][1], 16))
    return bytes_matrix

def shiftRows(bytes_matrix):
    rows = list(zip(*bytes_matrix))
    for row in range(len(rows)):
        rows[row] = rotWord(list(rows[row]), row)
    matrix = [list(row) for row in list(zip(*rows))]
    return matrix

def invShiftRows(bytes_matrix):
    rows = list(zip(*bytes_matrix))
    for row in range(len(rows)):
        rows[row] = rotWord(list(rows[row]), -row)
    matrix = [list(row) for row in list(zip(*rows))]
    return matrix

def mixColumns(bytes_matrix, inv = False):
    new_matrix = []
    if inv: transformation_matrix = [[14, 11, 13, 9], [9, 14, 11, 13], [13, 9, 14, 11], [11, 13, 9, 14]]
    else: transformation_matrix = [[2,3,1,1], [1,2,3,1], [1,1,2,3], [3,1,1,2]]
    for column in bytes_matrix:
        new_column = []
        for row in transformation_matrix:
            value = 0
            for i in range(4):
                if not isinstance(column[i], int): column[i] = int(column[i], 16)
                if row[i] == 1: value = xor(column[i], value)
                else: value = xor(mixColumnsMultiplication(row[i], column[i]), value)
            new_column.append(('0' + hex(value)[2:])[-2:])
        new_matrix.append(new_column)
    return new_matrix

def encrypt(message, key):
    if len(message) % 32 != 0:
        length = 32 - (len(message) % 32)
        message += length * "0"

    rounds_num = {32: 10, 48: 12, 64: 14}.get(len(key))
    round_keys = generateKeys(key)
    initial_key = key[:32]

    encrypted = ''
    for z in range(0, len(message), 32):
        block = messageXOR(int(message[z: z+32], 16), int(initial_key, 16))

        for i in range(rounds_num):
            matrix = generateByteMatrix(block)
            matrix = subBytes(matrix)
            matrix = shiftRows(matrix)
            if i != rounds_num - 1: matrix = mixColumns(matrix)
            block = ''
            for k in matrix:
                for j in k:
                    if i == rounds_num - 1: block += ('0' + hex(j)[2:])[-2:]
                    else: block += j
            block = hex(xor(int(block, 16), int(round_keys[i], 16)))[2:]
            if len(block) < 32: block = "0" * (32 - len(block)) + block
        encrypted += block

    return encrypted

def decrypt(cipher, key):
    rounds_num = {32: 10, 48: 12, 64: 14}.get(len(key))
    round_keys = generateKeys(key)
    round_keys.reverse()
    round_keys.append(key[:32])
    initial_key = round_keys.pop(0)

    decrypted = ''
    for z in range(0, len(cipher), 32):
        block = messageXOR(int(cipher[z: z+32], 16), int(initial_key, 16))
        for i in range(rounds_num):
            matrix = generateByteMatrix(block)
            matrix = invShiftRows(matrix)
            matrix = subBytes(matrix, True)
            block = ''
            for k in matrix:
                for j in k:
                    block += ('0' + hex(j)[2:])[-2:]
            block = hex(xor(int(block, 16), int(round_keys[i], 16)))[2:]
            if len(block) < 32: block = "0" * (32 - len(block)) + block
            
            if i != rounds_num - 1:
                matrix = generateByteMatrix(block)
                matrix = mixColumns(matrix, True)
                block = ''
                for k in matrix:
                    for j in k:
                        block += j
        decrypted += block

    return decrypted